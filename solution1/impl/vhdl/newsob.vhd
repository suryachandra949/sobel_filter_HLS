-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity newsob is
port (
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of newsob is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "newsob,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.358500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=762,HLS_SYN_LUT=951}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal newsob_Block_proc_U0_ap_start : STD_LOGIC;
    signal newsob_Block_proc_U0_ap_done : STD_LOGIC;
    signal newsob_Block_proc_U0_ap_continue : STD_LOGIC;
    signal newsob_Block_proc_U0_ap_idle : STD_LOGIC;
    signal newsob_Block_proc_U0_ap_ready : STD_LOGIC;
    signal newsob_Block_proc_U0_img_0_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_Block_proc_U0_img_0_rows_V_out_full_n : STD_LOGIC;
    signal newsob_Block_proc_U0_img_0_rows_V_out_write : STD_LOGIC;
    signal newsob_Block_proc_U0_img_0_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_Block_proc_U0_img_0_cols_V_out_full_n : STD_LOGIC;
    signal newsob_Block_proc_U0_img_0_cols_V_out_write : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_ap_start : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_ap_done : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_ap_continue : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_ap_idle : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_ap_ready : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TVALID : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_img_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_img_rows_V_empty_n : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_rows_V_read : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_img_cols_V_empty_n : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_cols_V_read : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_full_n : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_write : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_full_n : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_write : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_full_n : STD_LOGIC;
    signal newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_write : STD_LOGIC;
    signal newsob_Sobel_U0_ap_start : STD_LOGIC := '0';
    signal newsob_Sobel_U0_ap_done : STD_LOGIC;
    signal newsob_Sobel_U0_ap_continue : STD_LOGIC;
    signal newsob_Sobel_U0_ap_idle : STD_LOGIC;
    signal newsob_Sobel_U0_ap_ready : STD_LOGIC;
    signal newsob_Sobel_U0_p_src_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_Sobel_U0_p_src_rows_V_empty_n : STD_LOGIC;
    signal newsob_Sobel_U0_p_src_rows_V_read : STD_LOGIC;
    signal newsob_Sobel_U0_p_src_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal newsob_Sobel_U0_p_src_cols_V_empty_n : STD_LOGIC;
    signal newsob_Sobel_U0_p_src_cols_V_read : STD_LOGIC;
    signal newsob_Sobel_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal newsob_Sobel_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal newsob_Sobel_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal newsob_Sobel_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal newsob_Sobel_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal newsob_Sobel_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_ap_start : STD_LOGIC := '0';
    signal newsob_Mat2AXIvideo_DMA_U0_ap_done : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_ap_continue : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_ap_idle : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_ap_ready : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_read : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal img_0_rows_V_channel_write : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_read : STD_LOGIC;
    signal img_0_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal img_0_cols_V_channel_write : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_read : STD_LOGIC;
    signal img_0_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_0_rows_V_channel5_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel5_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel5_full_n : STD_LOGIC;
    signal img_0_rows_V_channel5_write : STD_LOGIC;
    signal img_0_rows_V_channel5_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel5_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel5_read : STD_LOGIC;
    signal img_0_cols_V_channel6_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel6_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel6_full_n : STD_LOGIC;
    signal img_0_cols_V_channel6_write : STD_LOGIC;
    signal img_0_cols_V_channel6_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel6_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel6_read : STD_LOGIC;
    signal img_1_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal ap_reg_procdone_newsob_Block_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_newsob_AXIvideo2Mat_DMA_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_newsob_Sobel_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_newsob_Mat2AXIvideo_DMA_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component newsob_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_rows_V_out_full_n : IN STD_LOGIC;
        img_0_rows_V_out_write : OUT STD_LOGIC;
        img_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_cols_V_out_full_n : IN STD_LOGIC;
        img_0_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component newsob_AXIvideo2Mat_DMA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component newsob_Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component newsob_Mat2AXIvideo_DMA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_newsob_img_0_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_newsob_img_0_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_newsob_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_newsob_img_0_rows_V_channel5 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_newsob_img_0_cols_V_channel6 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_newsob_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    newsob_Block_proc_U0 : component newsob_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => newsob_Block_proc_U0_ap_start,
        ap_done => newsob_Block_proc_U0_ap_done,
        ap_continue => newsob_Block_proc_U0_ap_continue,
        ap_idle => newsob_Block_proc_U0_ap_idle,
        ap_ready => newsob_Block_proc_U0_ap_ready,
        img_0_rows_V_out_din => newsob_Block_proc_U0_img_0_rows_V_out_din,
        img_0_rows_V_out_full_n => newsob_Block_proc_U0_img_0_rows_V_out_full_n,
        img_0_rows_V_out_write => newsob_Block_proc_U0_img_0_rows_V_out_write,
        img_0_cols_V_out_din => newsob_Block_proc_U0_img_0_cols_V_out_din,
        img_0_cols_V_out_full_n => newsob_Block_proc_U0_img_0_cols_V_out_full_n,
        img_0_cols_V_out_write => newsob_Block_proc_U0_img_0_cols_V_out_write);

    newsob_AXIvideo2Mat_DMA_U0 : component newsob_AXIvideo2Mat_DMA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => newsob_AXIvideo2Mat_DMA_U0_ap_start,
        ap_done => newsob_AXIvideo2Mat_DMA_U0_ap_done,
        ap_continue => newsob_AXIvideo2Mat_DMA_U0_ap_continue,
        ap_idle => newsob_AXIvideo2Mat_DMA_U0_ap_idle,
        ap_ready => newsob_AXIvideo2Mat_DMA_U0_ap_ready,
        INPUT_STREAM_TDATA => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TDEST,
        img_rows_V_dout => newsob_AXIvideo2Mat_DMA_U0_img_rows_V_dout,
        img_rows_V_empty_n => newsob_AXIvideo2Mat_DMA_U0_img_rows_V_empty_n,
        img_rows_V_read => newsob_AXIvideo2Mat_DMA_U0_img_rows_V_read,
        img_cols_V_dout => newsob_AXIvideo2Mat_DMA_U0_img_cols_V_dout,
        img_cols_V_empty_n => newsob_AXIvideo2Mat_DMA_U0_img_cols_V_empty_n,
        img_cols_V_read => newsob_AXIvideo2Mat_DMA_U0_img_cols_V_read,
        img_data_stream_V_din => newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_full_n,
        img_data_stream_V_write => newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_write,
        img_rows_V_out_din => newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_full_n,
        img_rows_V_out_write => newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_write,
        img_cols_V_out_din => newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_full_n,
        img_cols_V_out_write => newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_write);

    newsob_Sobel_U0 : component newsob_Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => newsob_Sobel_U0_ap_start,
        ap_done => newsob_Sobel_U0_ap_done,
        ap_continue => newsob_Sobel_U0_ap_continue,
        ap_idle => newsob_Sobel_U0_ap_idle,
        ap_ready => newsob_Sobel_U0_ap_ready,
        p_src_rows_V_dout => newsob_Sobel_U0_p_src_rows_V_dout,
        p_src_rows_V_empty_n => newsob_Sobel_U0_p_src_rows_V_empty_n,
        p_src_rows_V_read => newsob_Sobel_U0_p_src_rows_V_read,
        p_src_cols_V_dout => newsob_Sobel_U0_p_src_cols_V_dout,
        p_src_cols_V_empty_n => newsob_Sobel_U0_p_src_cols_V_empty_n,
        p_src_cols_V_read => newsob_Sobel_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => newsob_Sobel_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => newsob_Sobel_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => newsob_Sobel_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => newsob_Sobel_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => newsob_Sobel_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => newsob_Sobel_U0_p_dst_data_stream_V_write);

    newsob_Mat2AXIvideo_DMA_U0 : component newsob_Mat2AXIvideo_DMA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => newsob_Mat2AXIvideo_DMA_U0_ap_start,
        ap_done => newsob_Mat2AXIvideo_DMA_U0_ap_done,
        ap_continue => newsob_Mat2AXIvideo_DMA_U0_ap_continue,
        ap_idle => newsob_Mat2AXIvideo_DMA_U0_ap_idle,
        ap_ready => newsob_Mat2AXIvideo_DMA_U0_ap_ready,
        img_data_stream_V_dout => newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_read,
        OUTPUT_STREAM_TDATA => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TDEST);

    img_0_rows_V_channel_U : component FIFO_newsob_img_0_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel_din,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => img_0_rows_V_channel_write,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => img_0_rows_V_channel_read);

    img_0_cols_V_channel_U : component FIFO_newsob_img_0_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel_din,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => img_0_cols_V_channel_write,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => img_0_cols_V_channel_read);

    img_0_data_stream_0_V_U : component FIFO_newsob_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_0_rows_V_channel5_U : component FIFO_newsob_img_0_rows_V_channel5
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel5_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel5_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel5_din,
        if_full_n => img_0_rows_V_channel5_full_n,
        if_write => img_0_rows_V_channel5_write,
        if_dout => img_0_rows_V_channel5_dout,
        if_empty_n => img_0_rows_V_channel5_empty_n,
        if_read => img_0_rows_V_channel5_read);

    img_0_cols_V_channel6_U : component FIFO_newsob_img_0_cols_V_channel6
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel6_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel6_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel6_din,
        if_full_n => img_0_cols_V_channel6_full_n,
        if_write => img_0_cols_V_channel6_write,
        if_dout => img_0_cols_V_channel6_dout,
        if_empty_n => img_0_cols_V_channel6_empty_n,
        if_read => img_0_cols_V_channel6_read);

    img_1_data_stream_0_V_U : component FIFO_newsob_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);





    -- ap_reg_procdone_newsob_AXIvideo2Mat_DMA_U0 assign process. --
    ap_reg_procdone_newsob_AXIvideo2Mat_DMA_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_newsob_AXIvideo2Mat_DMA_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_newsob_AXIvideo2Mat_DMA_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = newsob_AXIvideo2Mat_DMA_U0_ap_done)) then 
                    ap_reg_procdone_newsob_AXIvideo2Mat_DMA_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_newsob_Block_proc_U0 assign process. --
    ap_reg_procdone_newsob_Block_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_newsob_Block_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_newsob_Block_proc_U0 <= ap_const_logic_0;
                elsif ((newsob_Block_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_newsob_Block_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_newsob_Mat2AXIvideo_DMA_U0 assign process. --
    ap_reg_procdone_newsob_Mat2AXIvideo_DMA_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_newsob_Mat2AXIvideo_DMA_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_newsob_Mat2AXIvideo_DMA_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = newsob_Mat2AXIvideo_DMA_U0_ap_done)) then 
                    ap_reg_procdone_newsob_Mat2AXIvideo_DMA_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_newsob_Sobel_U0 assign process. --
    ap_reg_procdone_newsob_Sobel_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_newsob_Sobel_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_newsob_Sobel_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = newsob_Sobel_U0_ap_done)) then 
                    ap_reg_procdone_newsob_Sobel_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- newsob_Mat2AXIvideo_DMA_U0_ap_start assign process. --
    newsob_Mat2AXIvideo_DMA_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                newsob_Mat2AXIvideo_DMA_U0_ap_start <= ap_const_logic_0;
            else
                newsob_Mat2AXIvideo_DMA_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- newsob_Sobel_U0_ap_start assign process. --
    newsob_Sobel_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                newsob_Sobel_U0_ap_start <= ap_const_logic_0;
            else
                newsob_Sobel_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    INPUT_STREAM_TREADY <= newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TREADY;
    OUTPUT_STREAM_TDATA <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TVALID;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(newsob_Block_proc_U0_ap_idle, newsob_AXIvideo2Mat_DMA_U0_ap_idle, newsob_Sobel_U0_ap_idle, newsob_Mat2AXIvideo_DMA_U0_ap_idle)
    begin
        if (((newsob_Block_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = newsob_AXIvideo2Mat_DMA_U0_ap_idle) and (ap_const_logic_1 = newsob_Sobel_U0_ap_idle) and (ap_const_logic_1 = newsob_Mat2AXIvideo_DMA_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(newsob_Mat2AXIvideo_DMA_U0_ap_done)
    begin
        if ((ap_const_logic_1 = newsob_Mat2AXIvideo_DMA_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= newsob_AXIvideo2Mat_DMA_U0_ap_ready;
    img_0_cols_V_channel6_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel6_din <= newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_din;
    img_0_cols_V_channel6_read <= newsob_Sobel_U0_p_src_cols_V_read;
    img_0_cols_V_channel6_write <= newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_write;
    img_0_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_din <= newsob_Block_proc_U0_img_0_cols_V_out_din;
    img_0_cols_V_channel_read <= newsob_AXIvideo2Mat_DMA_U0_img_cols_V_read;
    img_0_cols_V_channel_write <= newsob_Block_proc_U0_img_0_cols_V_out_write;
    img_0_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_0_V_din <= newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_din;
    img_0_data_stream_0_V_read <= newsob_Sobel_U0_p_src_data_stream_V_read;
    img_0_data_stream_0_V_write <= newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_write;
    img_0_rows_V_channel5_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel5_din <= newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_din;
    img_0_rows_V_channel5_read <= newsob_Sobel_U0_p_src_rows_V_read;
    img_0_rows_V_channel5_write <= newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_write;
    img_0_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel_din <= newsob_Block_proc_U0_img_0_rows_V_out_din;
    img_0_rows_V_channel_read <= newsob_AXIvideo2Mat_DMA_U0_img_rows_V_read;
    img_0_rows_V_channel_write <= newsob_Block_proc_U0_img_0_rows_V_out_write;
    img_1_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_0_V_din <= newsob_Sobel_U0_p_dst_data_stream_V_din;
    img_1_data_stream_0_V_read <= newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_read;
    img_1_data_stream_0_V_write <= newsob_Sobel_U0_p_dst_data_stream_V_write;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TDATA <= INPUT_STREAM_TDATA;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TDEST <= INPUT_STREAM_TDEST;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TID <= INPUT_STREAM_TID;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TKEEP <= INPUT_STREAM_TKEEP;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TLAST <= INPUT_STREAM_TLAST;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TSTRB <= INPUT_STREAM_TSTRB;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TUSER <= INPUT_STREAM_TUSER;
    newsob_AXIvideo2Mat_DMA_U0_INPUT_STREAM_TVALID <= INPUT_STREAM_TVALID;
    newsob_AXIvideo2Mat_DMA_U0_ap_continue <= ap_const_logic_1;
    newsob_AXIvideo2Mat_DMA_U0_ap_start <= ap_start;
    newsob_AXIvideo2Mat_DMA_U0_img_cols_V_dout <= img_0_cols_V_channel_dout;
    newsob_AXIvideo2Mat_DMA_U0_img_cols_V_empty_n <= img_0_cols_V_channel_empty_n;
    newsob_AXIvideo2Mat_DMA_U0_img_cols_V_out_full_n <= img_0_cols_V_channel6_full_n;
    newsob_AXIvideo2Mat_DMA_U0_img_data_stream_V_full_n <= img_0_data_stream_0_V_full_n;
    newsob_AXIvideo2Mat_DMA_U0_img_rows_V_dout <= img_0_rows_V_channel_dout;
    newsob_AXIvideo2Mat_DMA_U0_img_rows_V_empty_n <= img_0_rows_V_channel_empty_n;
    newsob_AXIvideo2Mat_DMA_U0_img_rows_V_out_full_n <= img_0_rows_V_channel5_full_n;
    newsob_Block_proc_U0_ap_continue <= ap_const_logic_1;
    newsob_Block_proc_U0_ap_start <= ap_start;
    newsob_Block_proc_U0_img_0_cols_V_out_full_n <= img_0_cols_V_channel_full_n;
    newsob_Block_proc_U0_img_0_rows_V_out_full_n <= img_0_rows_V_channel_full_n;
    newsob_Mat2AXIvideo_DMA_U0_OUTPUT_STREAM_TREADY <= OUTPUT_STREAM_TREADY;
    newsob_Mat2AXIvideo_DMA_U0_ap_continue <= ap_sig_hs_continue;
    newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_dout <= img_1_data_stream_0_V_dout;
    newsob_Mat2AXIvideo_DMA_U0_img_data_stream_V_empty_n <= img_1_data_stream_0_V_empty_n;
    newsob_Sobel_U0_ap_continue <= ap_const_logic_1;
    newsob_Sobel_U0_p_dst_data_stream_V_full_n <= img_1_data_stream_0_V_full_n;
    newsob_Sobel_U0_p_src_cols_V_dout <= img_0_cols_V_channel6_dout;
    newsob_Sobel_U0_p_src_cols_V_empty_n <= img_0_cols_V_channel6_empty_n;
    newsob_Sobel_U0_p_src_data_stream_V_dout <= img_0_data_stream_0_V_dout;
    newsob_Sobel_U0_p_src_data_stream_V_empty_n <= img_0_data_stream_0_V_empty_n;
    newsob_Sobel_U0_p_src_rows_V_dout <= img_0_rows_V_channel5_dout;
    newsob_Sobel_U0_p_src_rows_V_empty_n <= img_0_rows_V_channel5_empty_n;
end behav;
